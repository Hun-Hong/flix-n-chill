// stores/recommendation.js
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import axios from 'axios'
import { useUserStore } from './accounts'

const useRecommendationStore = defineStore('recommendation', () => {
  // State - Î∞òÏùëÌòï ÏÉÅÌÉú
  const recommendations = ref([])
  const userGenreAnalysis = ref(null)
  const similarMovies = ref([])
  const loading = ref(false)
  const error = ref(null)



  // API ÏÑ§Ï†ï
  const API_BASE_URL = 'http://localhost:8000/api/v1/movies'


  // Axios ÏÑ§Ï†ï
  const getAuthHeaders = (() => {
    const userStore = useUserStore()

    return {
      'Authorization': `Token ${userStore.token}`,
      'Content-Type': 'application/json'
    }
  })

  // Getters
  const hasRecommendations = computed(() => {
    return Array.isArray(recommendations.value) && recommendations.value.length > 0
  })

  const topGenres = computed(() => {
    if (!userGenreAnalysis.value?.genre_preferences) return []

    return Object.entries(userGenreAnalysis.value.genre_preferences)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5)
      .map(([genre, score]) => ({ genre, score: Number(score) }))
  })

  const recommendationCount = computed(() => recommendations.value.length)

  // Actions
  const getMovieRecommendations = async (options = {}) => {
    loading.value = true
    error.value = null

    try {
      console.log('üé¨ ÏòÅÌôî Ï∂îÏ≤ú API ÏöîÏ≤≠:', options)

      const params = {
        count: options.count || 10,
        exclude_rated: options.excludeRated !== false ? 'true' : 'false'
      }

      const response = await axios.get(`${API_BASE_URL}/recommendations/`, {
        params,
        headers: getAuthHeaders()
      })

      console.log('‚úÖ Ï∂îÏ≤ú API ÏùëÎãµ:', response.data)

      if (response.data.recommendations && Array.isArray(response.data.recommendations)) {
        recommendations.value = response.data.recommendations
        console.log(`üìù ${recommendations.value.length}Í∞ú Ï∂îÏ≤ú Ï†ÄÏû•Îê®`)
      } else {
        recommendations.value = []
        console.warn('‚ö†Ô∏è Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùå')
      }

      return response.data

    } catch (err) {
      console.error('‚ùå Ï∂îÏ≤ú API Ïò§Î•ò:', err)

      if (err.response?.status === 401) {
        error.value = 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.'
        localStorage.removeItem('access_token')
      } else if (err.response?.data?.error) {
        error.value = err.response.data.error
      } else if (err.response?.data?.detail) {
        error.value = err.response.data.detail
      } else {
        error.value = 'Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.'
      }

      recommendations.value = []
      throw err
    } finally {
      loading.value = false
    }
  }

  const getUserGenreAnalysis = async () => {
    loading.value = true
    error.value = null

    try {
      console.log('üìä Ïû•Î•¥ Î∂ÑÏÑù API ÏöîÏ≤≠')

      const response = await axios.get(`${API_BASE_URL}/user/genre-analysis/`, {
        headers: getAuthHeaders()
      })

      console.log('‚úÖ Ïû•Î•¥ Î∂ÑÏÑù ÏùëÎãµ:', response.data)
      userGenreAnalysis.value = response.data

      return response.data

    } catch (err) {
      console.error('‚ùå Ïû•Î•¥ Î∂ÑÏÑù Ïò§Î•ò:', err)

      if (err.response?.status === 401) {
        error.value = 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.'
      } else if (err.response?.data?.error) {
        error.value = err.response.data.error
      } else {
        error.value = 'Ïû•Î•¥ Î∂ÑÏÑùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.'
      }

      userGenreAnalysis.value = null
      throw err
    } finally {
      loading.value = false
    }
  }

  const getSimilarMovies = async (movieId) => {
    loading.value = true
    error.value = null

    try {
      console.log('üîç Ïú†ÏÇ¨ ÏòÅÌôî API ÏöîÏ≤≠:', movieId)

      const response = await axios.get(`${API_BASE_URL}/movies/${movieId}/similar/`, {
        headers: getAuthHeaders()
      })

      console.log('‚úÖ Ïú†ÏÇ¨ ÏòÅÌôî ÏùëÎãµ:', response.data)

      if (response.data.similar_movies && Array.isArray(response.data.similar_movies)) {
        similarMovies.value = response.data.similar_movies
      } else {
        similarMovies.value = []
      }

      return response.data

    } catch (err) {
      console.error('‚ùå Ïú†ÏÇ¨ ÏòÅÌôî Ïò§Î•ò:', err)

      if (err.response?.data?.error) {
        error.value = err.response.data.error
      } else {
        error.value = 'Ïú†ÏÇ¨ ÏòÅÌôîÎ•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.'
      }

      similarMovies.value = []
      throw err
    } finally {
      loading.value = false
    }
  }

  const clearRecommendations = () => {
    recommendations.value = []
    userGenreAnalysis.value = null
    similarMovies.value = []
    error.value = null
    console.log('üßπ Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî')
  }

  const appendRecommendations = (newRecommendations) => {
    if (Array.isArray(newRecommendations)) {
      recommendations.value.push(...newRecommendations)
      console.log(`‚ûï ${newRecommendations.length}Í∞ú Ï∂îÏ≤ú Ï∂îÍ∞Ä, Ï¥ù: ${recommendations.value.length}Í∞ú`)
    }
  }

  return {
    // State
    recommendations,
    userGenreAnalysis,
    similarMovies,
    loading,
    error,

    // Getters
    hasRecommendations,
    topGenres,
    recommendationCount,

    // Actions
    getMovieRecommendations,
    getUserGenreAnalysis,
    getSimilarMovies,
    clearRecommendations,
    appendRecommendations
  }
})

// Í∏∞Î≥∏ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ (Vue3 Ïä§ÌÉÄÏùº)
export { useRecommendationStore }